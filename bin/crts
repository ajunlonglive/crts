#!/bin/sh -eu

die() {
	echo "$@" >&2
	exit 1
}

run_() {
	if [ $capture ]; then
		"$@" 2>&1 | less -r
	else
		"$@"
	fi
}

build_dir=build
debug=none
valgrind_tool=memcheck
leak_check=""
capture=""
root="."

usage()
{
	printf "usage $0 [opts] [-- [cmd opts]]
opts:
  -b <build dir> use <build dir> instead of $build_dir as meson build dir
  -c             run with \`2>&1 | less -r\` appended
  -t <test>      set executable to <test>

  debugging:
  -g             run with gdb
  -l             run with lldb
  -v             run with valgrind
  -V <tool>      valgrind tool to use (default: $valgrind_tool)
  -L             --leak_check=full

  -h             show this message
"
}

while getopts "clLvV:t:gb:h" opt; do
	case "$opt" in
	b) build_dir="$OPTARG";;
	c) capture=1;;
	t) exe="$build_dir/tests/$OPTARG";;

	g) debug=gdb;;
	l) debug=lldb;;
	v) debug=valgrind;;
	V) valgrind_tool="$OPTARG";;
	L) leak_check="--leak-check=full";;

	h) usage; exit;;

	?) die "invalid arg";;
	esac
done
shift "$((OPTIND-1))"

exe="${exe:-$build_dir/launcher/crts}"

if [ ! -f "$exe" ] && [ -f "${exe}.exe" ]; then
	debug="wine"
	exe="${exe}.exe"
fi

make_asset_path_() {
	crts_asset_path="$root/$1"
	shift

	while [ "$#" -ge 1 ]; do
		crts_asset_path="$crts_asset_path:$root/$1"
		shift
	done
}

make_asset_path_ \
	"$build_dir/assets/obj" \
	"$build_dir/assets" \
	"assets/shaders" \
	"assets/cfg" \
	"assets/obj" \
	"assets" \
	"assets/bundle"

export CRTS_ASSET_PATH="$crts_asset_path"
export CRTS_LOG_LVL=3


case "$debug" in
wine)
	export WINEDEBUG="fixme-all"
	run_ wine64 "${exe}" "$@"
	;;
valgrind)
	run_ valgrind --tool="$valgrind_tool" $leak_check -- "$exe" "$@"
	;;
lldb)
	run_ lldb "$exe" -- "$@"
	;;
gdb)
	eval "run_ gdb -q "$exe" -ex 'r $@'"
	;;
none)
	run_ "$exe" "$@"
	;;
esac
