#!/bin/sh -eu

die() {
	echo "$@" >&2
	exit 1
}

run_() {
	if [ $capture ]; then
		"$@" 2>&1 | less -r
	else
		"$@"
	fi
}

build_dir=build
debug=none
valgrind_tool=memcheck
leak_check=""
capture=""

export CRTS_ASSET_PATH="build/assets/obj:build/assets:assets/shaders:assets/cfg:assets/obj:assets"
export CRTS_LOG_LVL=3

usage()
{
	printf "usage bin/crts [opts] <cmd> [cmd opts]
opts:
-v             run under valgrind
-t <tool>      valgrind tool to use (default: $valgrind_tool)
-L             --leak_check=full
-g             run under gdb
-l             run under lldb
-b <build dir> use <build dir> instead of build as meson build dir
-c             run the command with 2>&1 | less -r appended
-h             show this message

cmds:
c|client       crts client
s|server       crts server
t|terragen     interactive terrain generator
s|snap         create images from save files
"
}

while getopts "clLvt:gb:h" opt; do
	case "$opt" in
	v) debug=valgrind;;
	L) leak_check="--leak-check=full";;
	t) valgrind_tool="$OPTARG";;
	l) debug=lldb;;
	g) debug=gdb;;
	c) capture=1;;
	b) build_dir="$OPTARG";;
	h) usage; exit;;
	?) die "invalid arg";;
	esac
done
shift "$((OPTIND-1))"

if [ "$#" -lt 1 ]; then
	die "please supply a command"
fi

case "$1" in
c|client) exe="$build_dir/client/client";;
s|server) exe="$build_dir/server/server";;
g|terragen) exe="$build_dir/terragen/terragen";;
t|test) exe="$build_dir/test/$2"; shift;;
p|snap) exe="$build_dir/util/snap";;
*) die "command $1 not found";;
esac

shift

case "$debug" in
valgrind)
	run_ valgrind --tool="$valgrind_tool" $leak_check -- "$exe" "$@"
	;;
lldb)
	run_ lldb "$exe" -- "$@"
	;;
gdb)
	eval "run_ gdb -q "$exe" -ex 'r $@'"
	;;
none)
	run_ "$exe" "$@"
	;;
esac
