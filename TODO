- Make ent ids compacting, the next added ent should reuse the last deleted
  ents id, else len(ents).  This will mean that the client can determine which
  ents it is missing just by knowing the len(ents).  Right now, if the client
  misses an ent on its first pass, it will have to wait until its uint32_t
  counter overflows until it makes another pass since technically ent ids could
  be anything.
- make queue better (probably just switch everything to darr)
- move {unpack,pack}_* functions in network modules to their respective modules
  under shared/serialize/.  Unpack functions should also be restructured to
  just use a union
- prune actions which have all ents blacklisted
- give some sort of visual feedback on whether ents are idle or not
- give more visual feedback about actions
- implement the ability to cancel actions
- when ents are killed, turn them into a corpse which should decay after a while
- add wild animals
  - randomly spawned when a new chunk is generated
- add a way for ents to reproduce
  - requires food as a resource?
  - figure out reproduction
    - special "queen" ent that produces others
    - implement as an action, 2 max?
    - special building that continuously generates
    - "build" ent out of some resource (needs to be renewable ideally)
